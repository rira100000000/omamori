# frozen_string_literal: true

require 'sinatra'

# CSRF (Cross-Site Request Forgery) の脆弱性を含むデモコード
# フォーム送信時にCSRFトークンによる検証を行っていない例

# ユーザー情報を更新する想定のPOSTエンドポイント
post '/update_profile' do
  # 本来はここでCSRFトークンの検証が必要だが、省略されている
  user_id = params['user_id']
  new_email = params['email']

  # ユーザー情報の更新処理 (実際には行わない)
  puts "ユーザー #{user_id} のメールアドレスを #{new_email} に更新しました。"

  "Profile updated for user #{user_id}."
end

# 実行方法:
# 1. このファイルを保存
# 2. ターミナルで `ruby demo/csrf_vulnerability.rb` を実行
# 3. 攻撃者は、このエンドポイントへのPOSTリクエストをユーザーに意図せず実行させるような細工を施したページを作成し、ユーザーを誘導する。
#    例えば、以下のようなHTMLを含むページを別のサイトに用意する:
#    <form action="http://localhost:4567/update_profile" method="post">
#      <input type="hidden" name="user_id" value="123">
#      <input type="hidden" name="email" value="attacker@example.com">
#      <input type="submit" value="Click me!">
#    </form>
#    または、JavaScriptを使って自動的にPOSTリクエストを送信させる。
#    ユーザーがログインした状態でこのページを閲覧すると、意図せずプロファイルが更新される可能性がある。
